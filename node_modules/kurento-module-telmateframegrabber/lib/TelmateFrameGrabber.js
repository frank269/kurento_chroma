/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var OpenCVFilter = kurentoClient.register.abstracts.OpenCVFilter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Create an element
 *
 * @classdesc
 *  TelmateFrameGrabber interface. Documentation about the module
 *
 * @extends module:filters/abstracts.OpenCVFilter
 *
 * @constructor module:telmateframegrabber.TelmateFrameGrabber
 */
function TelmateFrameGrabber(){
  TelmateFrameGrabber.super_.call(this);
};
inherits(TelmateFrameGrabber, OpenCVFilter);


//
// Public methods
//

/**
 * clear plugin data
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.cleanup
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~cleanupCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.cleanup = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'cleanup', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~cleanupCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 *  1 for true 0 for false
 */

/**
 * get monitoring Thread timeout in seconds
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.getMonitorTimeoutSec
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~getMonitorTimeoutSecCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.getMonitorTimeoutSec = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getMonitorTimeoutSec', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~getMonitorTimeoutSecCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 *  path of snapshots location
 */

/**
 * get the session id for this session
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.getSessionUUID
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~getSessionUUIDCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.getSessionUUID = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getSessionUUID', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~getSessionUUIDCallback
 * @param {external:Error} error
 * @param {external:String} result
 *  UUID set for session
 */

/**
 * get Snapshot interval
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.getSnapInterval
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~getSnapIntervalCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.getSnapInterval = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getSnapInterval', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~getSnapIntervalCallback
 * @param {external:Error} error
 * @param {external:Integer} result
 *  Value of current snapshot interval
 */

/**
 * get the storage location for snapshots
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.getStoragePath
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~getStoragePathCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.getStoragePath = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'getStoragePath', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~getStoragePathCallback
 * @param {external:Error} error
 * @param {external:String} result
 *  path of snapshots location
 */

/**
 * set monitoring Thread timeout in seconds
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setMonitorTimeoutSec
 *
 * @param {external:Integer} timeout
 *  session timeout in sec
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setMonitorTimeoutSecCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setMonitorTimeoutSec = function(timeout, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('int', 'timeout', timeout, {required: true});
  //  

  var params = {
    timeout: timeout
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setMonitorTimeoutSec', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setMonitorTimeoutSecCallback
 * @param {external:Error} error
 */

/**
 * set the image storage format, 0x0=JPEG 0x1=PNG
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setOutputFormat
 *
 * @param {external:Integer} outputFormat
 *  output format
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setOutputFormatCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setOutputFormat = function(outputFormat, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('int', 'outputFormat', outputFormat, {required: true});
  //  

  var params = {
    outputFormat: outputFormat
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setOutputFormat', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setOutputFormatCallback
 * @param {external:Error} error
 */

/**
 * set the session UUID
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setSessionUUID
 *
 * @param {external:String} puuid
 *  path of snapshots location
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setSessionUUIDCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setSessionUUID = function(puuid, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('String', 'puuid', puuid, {required: true});
  //  

  var params = {
    puuid: puuid
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setSessionUUID', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setSessionUUIDCallback
 * @param {external:Error} error
 */

/**
 * set Snapshot interval.
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setSnapInterval
 *
 * @param {external:Integer} snapInterval
 *  Value of snapInterval in milliseconds
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setSnapIntervalCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setSnapInterval = function(snapInterval, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('int', 'snapInterval', snapInterval, {required: true});
  //  

  var params = {
    snapInterval: snapInterval
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setSnapInterval', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setSnapIntervalCallback
 * @param {external:Error} error
 */

/**
 * set the storage location for snapshots
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setStoragePath
 *
 * @param {external:String} path
 *  path of snapshots location
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setStoragePathCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setStoragePath = function(path, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('String', 'path', path, {required: true});
  //  

  var params = {
    path: path
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setStoragePath', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setStoragePathCallback
 * @param {external:Error} error
 */

/**
 * set the webetc endpoint name (used for storage location of snapshots)
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.setWebRtcEpName
 *
 * @param {external:String} epName
 *  endpoint name
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~setWebRtcEpNameCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.setWebRtcEpName = function(epName, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('String', 'epName', epName, {required: true});
  //  

  var params = {
    epName: epName
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'setWebRtcEpName', params, callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~setWebRtcEpNameCallback
 * @param {external:Error} error
 */

/**
 * take picture
 *
 * @alias module:telmateframegrabber.TelmateFrameGrabber.takePicture
 *
 * @param {module:telmateframegrabber.TelmateFrameGrabber~takePictureCallback} [callback]
 *
 * @return {external:Promise}
 */
TelmateFrameGrabber.prototype.takePicture = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'takePicture', callback), this)
};
/**
 * @callback module:telmateframegrabber.TelmateFrameGrabber~takePictureCallback
 * @param {external:Error} error
 */


/**
 * @alias module:telmateframegrabber.TelmateFrameGrabber.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the parent {@link module:core.MediaPipeline MediaPipeline}
 */
TelmateFrameGrabber.constructorParams = {
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  }
};

/**
 * @alias module:telmateframegrabber.TelmateFrameGrabber.events
 *
 * @extends module:filters/abstracts.OpenCVFilter.events
 */
TelmateFrameGrabber.events = OpenCVFilter.events;


/**
 * Checker for {@link module:telmateframegrabber.TelmateFrameGrabber}
 *
 * @memberof module:telmateframegrabber
 *
 * @param {external:String} key
 * @param {module:telmateframegrabber.TelmateFrameGrabber} value
 */
function checkTelmateFrameGrabber(key, value)
{
  if(!(value instanceof TelmateFrameGrabber))
    throw ChecktypeError(key, TelmateFrameGrabber, value);
};


module.exports = TelmateFrameGrabber;

TelmateFrameGrabber.check = checkTelmateFrameGrabber;
